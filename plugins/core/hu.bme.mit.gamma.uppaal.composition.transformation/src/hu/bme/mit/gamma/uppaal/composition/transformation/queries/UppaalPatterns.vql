/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.uppaal.composition.transformation.queries

import "http://www.uni-paderborn.de/uppaal/core/0.4.0"
import "http://www.uni-paderborn.de/uppaal/templates/0.4.0"
import "http://www.uni-paderborn.de/uppaal/expressions/0.4.0"
import "http://www.uni-paderborn.de/uppaal/types/0.4.0"
import "http://www.uni-paderborn.de/uppaal/declarations/0.4.0"

private pattern binaryToExpression(from : BinaryExpression, to : Expression) {
	BinaryExpression.firstExpr(from, to);
} or {
	BinaryExpression.secondExpr(from, to);
}

private pattern compareClock(compareExpression : CompareExpression, clockValue : Expression) {	
	CompareExpression.operator(compareExpression, ::GREATER_OR_EQUAL);
	CompareExpression.firstExpr(compareExpression, clockIdentifier);
	IdentifierExpression.identifier(clockIdentifier, clockVariable);
	ClockVariableDeclaration.variable(_, clockVariable);
	CompareExpression.secondExpr(compareExpression, clockValue);
}

pattern edgesWithClock(edge : Edge, clockValue : Expression) {
	Edge.guard(edge, compareExpression);
	find compareClock(compareExpression, clockValue);
} or {
	Edge.guard(edge, guard);
	find binaryToExpression+(guard, compareExpression);	
	find compareClock(compareExpression, clockValue);
}