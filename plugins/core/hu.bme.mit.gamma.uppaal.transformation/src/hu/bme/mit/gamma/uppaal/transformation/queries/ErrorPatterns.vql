/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.uppaal.transformation.queries

import "http://www.mit.bme.hu/gamma/expression/Model"
import "http://www.mit.bme.hu/gamma/action/Model"
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface"

private pattern sourceAndTargetOfTransitions(transition : Transition, source : StateNode, target : StateNode) {
	Transition.sourceState(transition, source);
	Transition.targetState(transition, target);
}

pattern inOutTransitions(transition : Transition, source : StateNode, target : StateNode) {
	find sourceAndTargetOfTransitions(transition, source, target);
	neg find sameRegionTransitions(source, target, transition, _);
	neg find toHigherTransitions(source, target, transition, _);
	neg find toLowerTransitions(source, target, transition, _);
}

///
pattern fromChoiceToHigherTransition(transition : Transition, choice : ChoiceState, target : StateNode) {
	find hasHistory(region);
	Region.stateNodes(region, choice);
	ChoiceState(choice);
	find toHigherTransitions(choice, target, transition, _);
}

private pattern hasHistory(region : Region) {
	Region.stateNodes(region, historyNode);
	ShallowHistoryState(historyNode);
} or {
	find hasDeepHistory(region);
} or {
	find regionToParentRegion+(region, parentRegion);
	find hasDeepHistory(parentRegion);
}

private pattern hasDeepHistory(region : Region) {
	Region.stateNodes(region, historyNode);
	DeepHistoryState(historyNode);
}

private pattern regionToParentRegion(region : Region, parentRegion : Region) {
	Region.stateNodes(parentRegion, state);
	State.regions(state, region);
}

private pattern entryStatesWithIncomingTransition(source : StateNode, entry : EntryState) {
	Transition.sourceState(transition, source);
	Transition.targetState(transition, entry);
}

private pattern entryStatesWithoutIncomingTransition(entry : EntryState) {
	neg find entryStatesWithIncomingTransition(_, entry);
}

pattern entryStatesWithIncorrectIncomingTransition(entry : EntryState) {
	neg EntryState(source);
	find entryStatesWithIncomingTransition(source, entry);
}

pattern multipleEntryStatesWithoutIncomingTransition(region : Region) {
	Region.stateNodes(region, entry1);
	Region.stateNodes(region, entry2);
	find entryStatesWithoutIncomingTransition(entry1);
	find entryStatesWithoutIncomingTransition(entry2);
	entry1 != entry2;
}

private pattern relevantEvents(port : Port, event : Event) {
	PortEventReference.port(portEventReference, port);
	PortEventReference.event(portEventReference, event);
} or {
	Port.interfaceRealization.interface.events.event(port, event);
	AnyPortEventReference.port(_, port);
} or {
	RaiseEventAction.port(raiseEventAction, port);
	RaiseEventAction.event(raiseEventAction, event);
} or {
	EventParameterReferenceExpression.port(reference, port);
	EventParameterReferenceExpression.event(reference, event);
}

pattern inOutEvents(port : Port, event : Event) {
	find relevantEvents(port, event);
	EventDeclaration.event(eventDeclaration, event);
	EventDeclaration.direction(eventDeclaration, ::INOUT);
}
